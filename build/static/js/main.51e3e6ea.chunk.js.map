{"version":3,"sources":["helpers/github-api-helpers.js","components/Star.js","components/ListView.js","components/Filter.js","App.js","serviceWorker.js","index.js"],"names":["params","a","axios","get","then","response","data","Star","onStarClicked","isStarred","onClick","icon","faStarSolid","faStarRegular","ListView","items","length","Table","striped","bordered","hover","variant","map","item","gitHubStars","name","url","description","id","Filter","options","languages","language","NavDropdown","Item","eventKey","Nav","title","getFavorites","localStorageData","window","localStorage","getItem","JSON","parse","mapData","favoritedRepositories","html_url","stargazers_count","some","repository","hello","App","getMyStars","useState","selectedTab","setSelectedTab","repositories","setRepositories","isLoading","setLoading","Set","filter","lang","handleBestOfTheWeekTabClicked","console","log","isoDate","subDays","Date","toISOString","fetchRepositories","sort","order","q","repos","useEffect","className","Jumbotron","style","marginBottom","ToggleButtonGroup","type","value","ToggleButton","favorites","e","repo","setItem","stringify","push","toggleFavorite","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.51e3e6ea.chunk.js","sourcesContent":["import axios from 'axios';\n\nexport async function fetchRepositories(params) {\n  return axios\n    .get('https://api.github.com/search/repositories', { params })\n    .then((response) => response.data);\n}\n","import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faStar as faStarSolid } from '@fortawesome/free-solid-svg-icons';\nimport { faStar as faStarRegular } from '@fortawesome/free-regular-svg-icons';\nexport default function Star({ onStarClicked, isStarred }) {\n  return (\n    <button onClick={onStarClicked}>\n      <FontAwesomeIcon icon={isStarred ? faStarSolid : faStarRegular} />\n    </button>\n  );\n}\n","import { useState } from 'react';\nimport { Table, Button } from 'react-bootstrap';\nimport Star from './Star';\nfunction ListView({ items, onStarClicked }) {\n  if (items.length === 0) {\n    return <h1> You have no items</h1>;\n  }\n  return (\n    <div>\n      <Table striped bordered hover variant=\"dark\">\n        <thead>\n          <tr>\n            <th>Rating</th>\n            <th>Repo name</th>\n            <th>Github link</th>\n            <th>Description</th>\n            <th>ADD</th>\n          </tr>\n        </thead>\n        <tbody>\n          {items.map((item) => {\n            return (\n              <tr key={item.id}>\n                <td>{item.gitHubStars}</td>\n                <td>{item.name}</td>\n                <td>{item.url}</td>\n                <td>{item.description}</td>\n                <td>\n                 \n                  <Star\n                    isStarred={item.isStarred}\n                    onStarClicked={onStarClicked(item)}\n                  />\n                </td>\n              </tr>\n            );\n          })}\n        </tbody>\n      </Table>\n    </div>\n  );\n}\n\nexport default ListView;\n\n","import Nav from 'react-bootstrap/Nav';\nimport NavDropdown from 'react-bootstrap/NavDropdown';\n\nfunction Filter({ languages }) {\n  const options = languages.map((language) => {\n    return <NavDropdown.Item eventKey={language}>{language}</NavDropdown.Item>;\n  });\n\n  return (\n    <Nav>\n      <NavDropdown title=\"Filter\" id=\"nav-dropdown\">\n        {options}\n      </NavDropdown>\n    </Nav>\n  );\n}\n\nexport default Filter;\n","\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport Jumbotron from 'react-bootstrap/Jumbotron';\r\nimport { ToggleButtonGroup, ToggleButton } from 'react-bootstrap';\r\n\r\n// import mockData from './Data';\r\nimport { fetchRepositories } from './helpers/github-api-helpers';\r\nimport ListView from './components/ListView';\r\nimport { format, subDays } from 'date-fns';\r\nimport './App.css';\r\nimport Filter from './components/Filter';\r\n\r\nconst getFavorites = () => {\r\n  const localStorageData = window.localStorage.getItem('favorites');\r\n  const favoritedRepositories = localStorageData\r\n    ? JSON.parse(localStorageData)\r\n    : [];\r\n  return favoritedRepositories;\r\n};\r\n\r\nconst mapData = (data) => {\r\n  const favoritedRepositories = getFavorites();\r\n  \r\n  \r\n  return data.map(({ id, name, description, html_url, stargazers_count, language }) => {\r\n    const isStarred = favoritedRepositories.some(\r\n      (repository) => repository.id === id\r\n    );\r\n    return {\r\n      id,\r\n      name,\r\n      description,\r\n      url: html_url,\r\n      gitHubStars: stargazers_count,\r\n      isStarred: isStarred,\r\n      hello: 'world',\r\n      language,\r\n    };\r\n  });\r\n};\r\n\r\nfunction App({ getMyStars }) {\r\n  const [selectedTab, setSelectedTab] = useState('');\r\n  // const handleChange = (val) => {\r\n  //   setSelectedTab(val);\r\n  // };\r\n  const [repositories, setRepositories] = useState([]);\r\n  const [isLoading, setLoading] = useState(false);\r\n  const languages = new Set(repositories.map((repository) => repository.language).filter(lang => lang)); \r\n\r\n  const toggleFavorite = (item) => {\r\n    let favorites = getFavorites();\r\n    // if its already there remove it and if you're in the my favs tab, then re-render the favorites to remove it\r\n    if (favorites.some((repo) => repo.id === item.id)) {\r\n      // Remove Favorite\r\n      favorites = favorites.filter((repo) => repo.id !== item.id);\r\n      window.localStorage.setItem('favorites', JSON.stringify(favorites));\r\n\r\n      if (selectedTab === 'My favorites') {\r\n        // my favories tab --> set the list to the favorites only\r\n        setRepositories(mapData(favorites));\r\n      } else {\r\n        // Week view tab\r\n        // if its the other tab, re-render the repositories to update the \"isStarred\" property\r\n        setRepositories(mapData(repositories));\r\n      }\r\n    } else {\r\n      // Add favorite\r\n      // if its not already in the favorites add it there then call\r\n      // setRepositories / mapData to update the \"isStarred\" property with the new value from localStorage\r\n      favorites.push(item);\r\n      window.localStorage.setItem('favorites', JSON.stringify(favorites));\r\n      // update the starred list\r\n      setRepositories(mapData(repositories));\r\n    }\r\n  };\r\n\r\n  const handleFavoritesTabClicked = () => {\r\n    setSelectedTab('My favorites');\r\n    const favorites = getFavorites();\r\n    setRepositories(mapData(favorites));\r\n  };\r\n\r\n  const handleBestOfTheWeekTabClicked = () => {\r\n    console.log({ selectedTab });\r\n    setSelectedTab('Best of the week');\r\n    if (selectedTab === 'Best of the week') {\r\n      // early return if the tab is already clicked\r\n      return;\r\n    } else {\r\n      const sevenDaysAgo = subDays(new Date(), 7);\r\n      const isoDate = sevenDaysAgo.toISOString();\r\n      setLoading(true);\r\n      fetchRepositories({\r\n        sort: 'stars',\r\n        order: 'desc',\r\n        q: `created:>${isoDate}`,\r\n      }).then((repos) => {\r\n        setLoading(false);\r\n        setRepositories(mapData(repos.items));\r\n      });\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    handleBestOfTheWeekTabClicked();\r\n  }, []);\r\n  const handleStarClicked = (item) => (e) => {\r\n    toggleFavorite(item);\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Jumbotron>\r\n        <h1>Best of the week</h1>\r\n        <h4>Your personal rating of the best repos of the week</h4>\r\n      </Jumbotron>\r\n      {isLoading && <h2>Loading...</h2>}\r\n      <div style={{ marginBottom: '2rem' }}>\r\n        <ToggleButtonGroup type=\"checkbox\" value={[1]}>\r\n          <ToggleButton onClick={handleBestOfTheWeekTabClicked} value={1}>\r\n            Best of the week\r\n          </ToggleButton>\r\n          <ToggleButton onClick={handleFavoritesTabClicked} value={2}>\r\n            My favourite\r\n          </ToggleButton>\r\n        </ToggleButtonGroup>\r\n      </div>\r\n      <div style={{ marginBottom: '2rem' }}>\r\n        <Filter languages={[...languages]} />\r\n      </div>\r\n\r\n      <ListView items={repositories} onStarClicked={handleStarClicked} />\r\n    </div>\r\n  );\r\n}\r\nexport default App;\r\n\r\n\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App  from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n  \r\n      <App />\r\n\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\nserviceWorker.unregister();\r\n\r\nexport default App;"],"sourceRoot":""}